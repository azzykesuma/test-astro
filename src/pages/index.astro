---
export const prerender = false; 
import PostReact from '../components/PostReact';
import Layout from '../layouts/Layout.astro';
import '../styles/global.css';
let accessTokenFromCookie = '';
let refreshTokenFromCookie = '';
const cookieHeader = Astro.request.headers.get('cookie');
if (cookieHeader) {
    const cookies = cookieHeader.split(';');
    for (const cookie of cookies) {
        const [name, value] = cookie.trim().split('=');
        if (name === 'accessToken') {
            accessTokenFromCookie = decodeURIComponent(value);
        } else if (name === 'refreshToken') {
            refreshTokenFromCookie = decodeURIComponent(value);
        }
    }
}

const initialAccessToken = accessTokenFromCookie;
const initialRefreshToken = refreshTokenFromCookie;
---

<Layout>
    <div class="container mx-auto p-4 md:p-8 min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 font-sans flex flex-col items-center justify-center">
        <div class="bg-white p-8 rounded-xl shadow-2xl w-full max-w-2xl border border-gray-100 text-center mb-8">
            <h1 class="text-4xl font-extrabold text-gray-900 mb-4">Welcome, User!</h1>
            <p class="text-lg text-gray-700">You are successfully logged in.</p>
            <p class="mt-4 text-sm text-gray-600">
                This page demonstrates accessing cookies and making an authenticated request.
            </p>
        </div>

        <div class="bg-white p-8 rounded-xl shadow-2xl w-full max-w-2xl border border-gray-100">
            <h2 class="text-2xl font-bold text-gray-800 mb-4">Cookie Information (Server-side accessed)</h2>
            <p class="text-gray-700 break-words">
                <strong>Access Token (from cookie):</strong> <span class="font-mono text-purple-700">{initialAccessToken || 'Not Found'}</span>
            </p>
            <p class="text-gray-700 break-words mt-2">
                <strong>Refresh Token (from cookie):</strong> <span class="font-mono text-purple-700">{initialRefreshToken || 'Not Found'}</span>
            </p>

            <h2 class="text-2xl font-bold text-gray-800 mt-8 mb-4">Mock Authenticated Fetch Request (Client-side)</h2>
            <button
                id="fetchDataButton"
                class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition duration-150 ease-in-out"
            >
                Make Authenticated Request
            </button>
            <div id="fetchResult" class="mt-4 p-4 bg-gray-50 rounded-lg text-gray-800 text-sm overflow-auto max-h-48">
                Click the button to see the mock API response.
            </div>
        </div>

        {/* This is where your PostReact component would typically render if it's client-side */}
        {/* <PostReact /> */}
        <div id="messageBox" class="p-3 text-sm rounded-md hidden mt-4" role="alert"></div>
    </div>

    <script>
		import { authenticatedFetch, initMessageBox, displayMessage } from '../lib/util';
        const fetchDataButton = document.getElementById('fetchDataButton');
        const fetchResultDiv = document.getElementById('fetchResult');

        // Initialize the message box element
        initMessageBox('messageBox');

        if (fetchDataButton && fetchResultDiv) {
            fetchDataButton.addEventListener('click', async () => {
                fetchResultDiv.textContent = 'Fetching data...';
                displayMessage('Attempting to fetch data...', false);

                try {
                    const response = await authenticatedFetch('/api/proxied-data', { method: 'GET' });
                    const data = await response.json();

                    fetchResultDiv.textContent = JSON.stringify(data, null, 2);
                    fetchResultDiv.classList.remove('text-red-700');
                    fetchResultDiv.classList.add('text-gray-800');
                    displayMessage('Data fetched successfully!', false);

                } catch (error) {
                    fetchResultDiv.classList.remove('text-gray-800');
                    fetchResultDiv.classList.add('text-red-700');
                    console.error('Overall operation failed:', error);
                }
            });
        }
    </script>
</Layout>
